[{"/Users/christiancurry/Documents/abstract_clock/src/index.js":"1","/Users/christiancurry/Documents/abstract_clock/src/App.js":"2","/Users/christiancurry/Documents/abstract_clock/src/ClockControls.js":"3","/Users/christiancurry/Documents/abstract_clock/src/ClockUI.js":"4"},{"size":228,"mtime":1646603065000,"results":"5","hashOfConfig":"6"},{"size":238,"mtime":1646603065000,"results":"7","hashOfConfig":"6"},{"size":1537,"mtime":1646603065000,"results":"8","hashOfConfig":"6"},{"size":8278,"mtime":1646611770150,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n8osk7",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/christiancurry/Documents/abstract_clock/src/index.js",[],[],"/Users/christiancurry/Documents/abstract_clock/src/App.js",[],[],"/Users/christiancurry/Documents/abstract_clock/src/ClockControls.js",[],[],"/Users/christiancurry/Documents/abstract_clock/src/ClockUI.js",["23"],[],"import React, { useEffect, useState, useCallback } from \"react\";\n\nexport default function ClockUI(props) {\n  let clockClass = \"error\"\n  if(props.isWider) {\n    clockClass = \"wideClock\"\n  } else {\n    clockClass = \"tallClock\"\n  }\n\n  const [clockStyle, setClockStyle] = useState(1);\n\n  const draw = useCallback(() => {\n    let size = props.size * 2;\n\n    let outerLineWidth = size / 180;\n    let outerLineLength = 80;\n\n    let secondHandSize = size / 30;\n    let secondHandDistance = size - secondHandSize;\n\n    let minuteHandSize = secondHandSize * 2;\n    let minuteHandDistance = size - secondHandSize * 2 - minuteHandSize;\n\n    let hourHandSize = minuteHandSize * (Math.PI / 2);\n    let hourHandDistance = size / 2 - secondHandSize * 2 - minuteHandSize;\n\n    let can = document.getElementById(\"clock\");\n    let ctx = can.getContext(\"2d\");\n    ctx.canvas.width = size;\n    ctx.canvas.height = size;\n\n    if(clockStyle == 1 ) {\n      //This is the spinning outer ring\n      drawRing(ctx);\n\n      //Spinning dot is annoying ish\n      //It Matches the spinning ring but seems excessive\n      //drawSpinningDot(ctx);\n\n      drawSecondHand(ctx);\n      drawMinuteHand(ctx);\n      drawHourHand(ctx);\n\n    } else {\n      drawBouncingClicks(ctx);\n      drawBouncingSeconds(ctx);\n      drawBouncingMins(ctx);\n      drawBouncingHours(ctx);\n    }\n\n    function drawBouncingClicks(ctx) {\n      let dotSize = size/20;\n      let rads = (Math.PI * 2)/(1000) * (props.click%1000) - 0.5 * Math.PI;\n      let dotY = (Math.sin(rads) * (size / 2 - dotSize) ) + size/2 ;\n      ctx.beginPath();\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, dotSize * 2, size);\n      ctx.fillStyle = \"white\";\n      ctx.arc(dotSize, dotY , dotSize, 0, 6.2);\n      ctx.fill();\n      ctx.fillStyle = \"black\";\n      ctx.strokeRect(0,0,8*dotSize,size);\n    }\n\n    function drawBouncingSeconds(ctx) {\n      let dotSize = size/20;\n      let rads = (Math.PI * 2)/(60*1000) * (props.click%(60*1000)) - 0.5 * Math.PI;\n      let dotY = (Math.sin(rads) * (size / 2 - dotSize) ) + size/2 ;\n      for(var i = 0; i <=30; i++) {\n        let edgeAdjust = 0;\n        let sinAdjust = Math.sin((Math.PI * 2)/30 * i -  Math.PI) * ((size - dotSize  )/30);\n        if(i === 0) {\n          edgeAdjust = 1;\n        } else if (i ===30) {\n          edgeAdjust = -1;\n        }\n        ctx.moveTo(2*dotSize, i*((size - 2 * dotSize)/30)+edgeAdjust+sinAdjust + dotSize);\n        ctx.lineTo(6*dotSize, i*((size - 2 * dotSize)/30)+edgeAdjust+sinAdjust + dotSize);\n        ctx.stroke();\n      }\n      if (rads < .5 *Math.PI) {\n        ctx.fillStyle=\"white\";\n        ctx.fillRect(2*dotSize, dotY, 2*dotSize, size-dotY - 1);\n        ctx.fillStyle=\"black\";\n      } else {\n        ctx.fillStyle=\"white\";\n        ctx.fillRect(2*dotSize, 1, 2*dotSize, dotY);\n        ctx.fillStyle=\"black\";\n      }\n      ctx.beginPath();\n      ctx.arc(dotSize + 2*dotSize, dotY , dotSize, 0, 6.2);\n      ctx.fill();\n    }\n\n    function drawBouncingMins(ctx) {\n      let dotSize = size/20;\n      let rads = (Math.PI * 2)/(60*60*1000) * (props.click%(60*60*1000)) - 0.5 * Math.PI;;\n      let dotY = (Math.sin(rads) * (size / 2 - dotSize) ) + size/2 ;\n      if (rads < .5 *Math.PI) {\n        ctx.fillStyle=\"white\";\n        ctx.fillRect(4*dotSize, dotY, 2*dotSize, size-dotY - 1);\n        ctx.fillStyle=\"black\";\n      } else {\n        ctx.fillStyle=\"white\";\n        ctx.fillRect(4*dotSize, 1, 2*dotSize, dotY);\n        ctx.fillStyle=\"black\";\n      }\n      ctx.beginPath();\n      ctx.arc(dotSize + 4*dotSize, dotY , dotSize, 0, 6.2);\n      ctx.fill();\n      \n    }\n\n    function drawBouncingHours(ctx) {\n      let dotSize = size/20;\n      let rads = (Math.PI * 2)/(24) * (props.hour) - 0.5 * Math.PI;\n      let dotY = (Math.sin(rads) * (size / 2 - dotSize) ) + size/2 ;\n      for(var i = 0; i <=12; i++) {\n        let edgeAdjust = 0;\n        let sinAdjust = Math.sin((Math.PI * 2)/12 * i -  Math.PI) * (size/12);\n        if(i === 0) {\n          edgeAdjust = 1;\n        } else if (i === 12) {\n          edgeAdjust = -1;\n        }\n        ctx.moveTo(6*dotSize, i*((size - 2 * dotSize)/12)+edgeAdjust+sinAdjust+dotSize);\n        ctx.lineTo(8*dotSize, i*((size - 2 * dotSize)/12)+edgeAdjust+sinAdjust+dotSize);\n        ctx.stroke();\n        \n      }\n      if (rads < .5 *Math.PI) {\n        ctx.fillStyle=\"white\";\n        ctx.fillRect(6*dotSize, dotY, 2*dotSize, size-dotY);\n        ctx.fillStyle=\"black\";\n      } else {\n        ctx.fillStyle=\"white\";\n        ctx.fillRect(6*dotSize, 0, 2*dotSize, dotY);\n        ctx.fillStyle=\"black\";\n      }\n      ctx.beginPath();\n      ctx.arc(dotSize + 6*dotSize, dotY , dotSize, 0, 6.2);\n      ctx.fill();\n     \n    }\n\n    function drawRing(ctx) {\n      let lead =\n        ((360 / 1000) * ((props.click % 1000) + outerLineLength) * Math.PI) /\n          180 -\n        0.5 * Math.PI;\n      ctx.clearRect(0, 0, size, size);\n      ctx.beginPath();\n      ctx.lineWidth = outerLineWidth;\n      ctx.arc(\n        size / 2,\n        size / 2,\n        size / 2 - outerLineWidth / 2,\n        ((360 / 1000) * (props.click % 1000) * Math.PI) / 180 - 0.5 * Math.PI,\n        lead\n      );\n      ctx.stroke();\n    }\n\n    /* \n    // Deprecating for now \n\n    function drawSpinningDot(ctx) {\n      let xClick =\n        (size / 2 - size / 10) *\n          Math.cos(\n            ((360 / 1000) * (props.click % 1000) * Math.PI) / 180 -\n              0.5 * Math.PI\n          ) +\n        size / 2;\n      let yClick =\n        (size / 2 - size / 10) *\n          Math.sin(\n            ((360 / 1000) * (props.click % 1000) * Math.PI) / 180 -\n              0.5 * Math.PI\n          ) +\n        size / 2;\n      ctx.beginPath();\n      ctx.arc(xClick, yClick, size / 20, 0, 2 * Math.PI * (size / 10));\n      ctx.fill();\n    }\n\n    */\n\n    function drawSecondHand(ctx) {\n      let xSec =\n        (size / 2 - secondHandDistance) *\n          Math.cos(\n            ((360 / 1000) * (props.click / 60) * Math.PI) / 180 + 0.5 * Math.PI\n          ) +\n        size / 2;\n      let ySec =\n        (size / 2 - secondHandDistance) *\n          Math.sin(\n            ((360 / 1000) * (props.click / 60) * Math.PI) / 180 + 0.5 * Math.PI\n          ) +\n        size / 2;\n\n      ctx.beginPath();\n      ctx.arc(xSec, ySec, secondHandSize, 0, 2 * Math.PI * secondHandSize);\n      ctx.fill();\n    }\n\n    function drawMinuteHand(ctx) {\n      let xMin =\n        (size / 2 - minuteHandDistance) *\n          Math.cos(\n            ((360 / 1000) * (props.click / 3600) * Math.PI) / 180 +\n              0.5 * Math.PI\n          ) +\n        size / 2;\n      let yMin =\n        (size / 2 - minuteHandDistance) *\n          Math.sin(\n            ((360 / 1000) * (props.click / 3600) * Math.PI) / 180 +\n              +0.5 * Math.PI\n          ) +\n        size / 2;\n\n      ctx.beginPath();\n      ctx.fillStyle = \"red\";\n      ctx.arc(xMin, yMin, minuteHandSize, 0, 2 * Math.PI * minuteHandSize);\n      ctx.fill();\n      ctx.fillStyle = \"black\";\n    }\n\n    function drawHourHand(ctx) {\n      let hourClick = props.hour % 12;\n      let hourRads = ((hourClick + props.click / 3600000) * 30 * Math.PI) / 180;\n      let xHour =\n        size / 2 +\n        Math.cos(hourRads - Math.PI * 0.5) * hourHandDistance -\n        hourHandSize / 2;\n      let yHour =\n        size / 2 +\n        Math.sin(hourRads - Math.PI * 0.5) * hourHandDistance -\n        hourHandSize / 2;\n\n      ctx.beginPath();\n      var hourDotCenterX = xHour + hourHandSize / 2;\n      var hourDotCenterY = yHour + hourHandSize / 2;\n      ctx.translate(hourDotCenterX, hourDotCenterY);\n      ctx.rotate(hourRads + (45 * Math.PI) / 180);\n      ctx.translate(-hourDotCenterX, -hourDotCenterY);\n      ctx.fillRect(\n        xHour + hourHandSize / 2,\n        yHour + hourHandSize / 2,\n        hourHandSize,\n        hourHandSize\n      );\n    }\n  }, [props.click, props.hour, clockStyle, props.size]);\n\n  useEffect(() => {\n    draw();\n  }, [draw]);\n\n  function handleStyleChange(e){\n    setClockStyle(e.target.value);\n  }\n\n  return (\n    <div id=\"mainInterface\" >\n      <select name=\"Clock Style\" onChange={handleStyleChange}>\n        <option value=\"1\">Abstract</option>\n        <option value=\"2\">Bouncing</option>\n      </select>\n      <div id=\"clockWrapper\">\n        <canvas className={clockClass} id=\"clock\" > </canvas>\n      </div>\n    </div>\n\n  );\n  \n  \n}\n",{"ruleId":"24","severity":1,"message":"25","line":33,"column":19,"nodeType":"26","messageId":"27","endLine":33,"endColumn":21},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]